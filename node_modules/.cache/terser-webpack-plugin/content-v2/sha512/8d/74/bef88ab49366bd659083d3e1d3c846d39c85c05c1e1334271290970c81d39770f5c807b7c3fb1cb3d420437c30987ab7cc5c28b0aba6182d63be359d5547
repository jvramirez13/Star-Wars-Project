{"map":"{\"version\":3,\"sources\":[\"/Users/johnramirez/Documents/star-wars-project/node_modules/url-loader/dist/cjs.js??ref--6-oneOf-0!/Users/johnramirez/Documents/star-wars-project/src/logo.png\",\"/Users/johnramirez/Documents/star-wars-project/src/App.js\",\"/Users/johnramirez/Documents/star-wars-project/src/serviceWorker.js\",\"/Users/johnramirez/Documents/star-wars-project/src/index.js\"],\"names\":[\"module\",\"exports\",\"__webpack_require__\",\"p\",\"App\",\"_this\",\"Object\",\"classCallCheck\",\"this\",\"possibleConstructorReturn\",\"getPrototypeOf\",\"call\",\"state\",\"character\",\"index\",\"handleClick\",\"bind\",\"assertThisInitialized\",\"_this2\",\"axios\",\"get\",\"then\",\"response\",\"setState\",\"data\",\"name\",\"react_default\",\"a\",\"createElement\",\"className\",\"src\",\"logo\",\"height\",\"width\",\"onClick\",\"Component\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"src_App_0\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"registration\",\"unregister\"],\"mappings\":\"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,6RCkCzBC,cA3Bb,SAAAA,IAAe,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACbC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACXC,UAAW,0DACXC,MAAO,GAGTT,EAAKU,YAAcV,EAAKU,YAAYC,KAAjBV,OAAAW,EAAA,EAAAX,CAAAA,OAAAW,EAAA,EAAAX,CAAAD,KAPNA,6EAUA,IAAAa,EAAAV,KACbW,EAAAA,EAAMC,IAAI,+BAAiCZ,KAAKI,MAAME,OACnDO,KAAK,SAAAC,GAAQ,OAAIJ,EAAKK,SAAS,CAACV,UAAWS,EAASE,KAAKC,SAC1DjB,KAAKe,SAAS,CAACT,MAAON,KAAKI,MAAME,MAAQ,qCAI3C,OACEY,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,qBACfH,EAAAC,EAAAC,cAAA,MAAA,CAAKE,IAAKC,EAAAA,EAAMC,OAAO,MAAMC,MAAM,QACnCP,EAAAC,EAAAC,cAAA,KAAA,KAAA,yBACAF,EAAAC,EAAAC,cAAA,KAAA,KAAKpB,KAAKI,MAAMC,WACda,EAAAC,EAAAC,cAAA,SAAA,CAAQC,UAAU,SAASK,QAAS1B,KAAKO,aAAzC,+CAvBUoB,EAAAA,WCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,EAAAA,EAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,KAAK,SAAA4B,GACjCA,EAAaC\",\"sourcesContent\":[\"module.exports = __webpack_public_path__ + \\\"static/media/logo.21b9c493.png\\\";\",\"import React, { Component } from 'react'\\nimport './App.css'\\nimport logo from './logo.png'\\n\\nimport axios from 'axios'\\n\\nclass App extends Component {\\n  constructor () {\\n    super()\\n    this.state = {\\n      character: \\\"Click the button below to output a Star Wars character!\\\",\\n      index: 0,\\n    }\\n\\n    this.handleClick = this.handleClick.bind(this)\\n  }\\n\\n  handleClick () {\\n    axios.get('https://swapi.co/api/people/' + this.state.index)\\n      .then(response => this.setState({character: response.data.name}));\\n      this.setState({index: this.state.index + 1});\\n  }\\n\\n  render () {\\n    return (\\n      <div className='button__container'>\\n      <img src={logo} height=\\\"500\\\" width=\\\"500\\\" ></img>\\n      <h1>STAR WARS CHARACTERS:</h1>\\n      <h3>{this.state.character}</h3>\\n        <button className='button' onClick={this.handleClick}>Click Me For A Star Wars Character!</button>\\n      </div>\\n    );\\n  }\\n}\\nexport default App\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read http://bit.ly/CRA-PWA.\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      if (\\n        response.status === 404 ||\\n        response.headers.get('content-type').indexOf('javascript') === -1\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport './index.css';\\nimport App from './App';\\nimport * as serviceWorker from './serviceWorker';\\n\\nReactDOM.render(<App />, document.getElementById('root'));\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: http://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{14:function(t,e,n){t.exports=n.p+\"static/media/logo.21b9c493.png\"},18:function(t,e,n){t.exports=n(47)},24:function(t,e,n){},26:function(t,e,n){},47:function(t,e,n){\"use strict\";n.r(e);var a=n(1),c=n.n(a),i=n(10),o=n.n(i),r=(n(24),n(11)),l=n(12),s=n(16),h=n(13),u=n(17),d=n(2),m=(n(26),n(14)),b=n.n(m),p=n(15),w=n.n(p),k=function(t){function e(){var t;return Object(r.a)(this,e),(t=Object(s.a)(this,Object(h.a)(e).call(this))).state={character:\"Click the button below to output a Star Wars character!\",index:0},t.handleClick=t.handleClick.bind(Object(d.a)(Object(d.a)(t))),t}return Object(u.a)(e,t),Object(l.a)(e,[{key:\"handleClick\",value:function(){var t=this;w.a.get(\"https://swapi.co/api/people/\"+this.state.index).then(function(e){return t.setState({character:e.data.name})}),this.setState({index:this.state.index+1})}},{key:\"render\",value:function(){return c.a.createElement(\"div\",{className:\"button__container\"},c.a.createElement(\"img\",{src:b.a,height:\"500\",width:\"500\"}),c.a.createElement(\"h1\",null,\"STAR WARS CHARACTERS:\"),c.a.createElement(\"h3\",null,this.state.character),c.a.createElement(\"button\",{className:\"button\",onClick:this.handleClick},\"Click Me For A Star Wars Character!\"))}}]),e}(a.Component);Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));o.a.render(c.a.createElement(k,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(t){t.unregister()})}},[[18,2,1]]]);","extractedComments":[]}